import React, {useReducer} from 'react';
import axios from 'axios';
import nacl from 'tweetnacl';
import naclUtil from 'tweetnacl-util';




import './App.css';
import {
  MDBContainer,
  MDBCol,
  MDBRow,
  MDBBtn,
  MDBIcon,
  MDBInput,
}
  from 'mdb-react-ui-kit';
import {API_URL} from "./config";
function App() {

  const [isLoading, setIsLoading] = React.useState(false);
  const [reportData, setReportData] = React.useState(null);
  const [report, setReport] = React.useState(null);



// Clé secrète (doit être partagée avec le serveur Python)
  //const secretKey = nacl.randomBytes(32);
  const secretKey = new Uint8Array([146,150,173,53,220,33,68,209,15,38,151,207,104,76,7,11,99,142,19,193,158,106,215,248,34,133,14,196,46,98,155,165]);

// Fonction pour crypter un message
  const encryptMessage = (message) => {
    const nonce = nacl.randomBytes(24);
    const messageUint8 = naclUtil.decodeUTF8(message);
    const encrypted = nacl.secretbox(messageUint8, nonce, secretKey);

    return {
      nonce: naclUtil.encodeBase64(nonce),
      encrypted: naclUtil.encodeBase64(encrypted),
    };
  };


  const initialState = {
    email: '',
    password: '',
  };

  function reducer(state, action) {
    switch (action.type) {
      case 'SET_EMAIL':
        return {...state, email: action.payload};
      case 'SET_PASSWORD':
        return {...state, password: action.payload};
      default:
        return state;
    }}

  const [state, dispatch] = useReducer(reducer, initialState);


  const handleEmailChangeLogin = (event) => {
    dispatch({type: 'SET_EMAIL', payload: event.target.value});
  }

  const handlePasswordChangeLogin = (event) => {
    dispatch({type: 'SET_PASSWORD', payload: event.target.value});
  };
  const handleSubmitLogin = (event)=>{
    event.preventDefault();
    setIsLoading(true);
    console.log(state.email);
    const user ={
      email : state.email,
      password: encryptMessage(state.password),
    }
    console.log(user);
    axios.post(`${API_URL}/login`, user , {withCredentials:true})
        .then(res=>{
          setReportData(res.data);
          setIsLoading(false)
          console.log(res.data)
          axios.get(`${API_URL}/get_report`, {withCredentials:true})
            .then(res=>{
              setReport(res.data);
              console.log(res.data)
            })
            .catch(err=>{
              console.log(err)
            })


                  })
        .catch((error) => {
          setIsLoading(false)
            console.log(error);
        });
  }


  const renderReport = () => {
    if (!reportData) return null;
    // Vous pouvez personnaliser l'affichage ici
    return (
        <div>
          <h2>Report Data</h2>
          <pre>{JSON.stringify(reportData, null, 2)}</pre>
        </div>
    );
  };



  const renderResult = () => {
    if (!report) return <p>No report data available.</p>;

    return (
        <div>
          <h2>Report Data</h2>
          {report.map((entry, index) => (

              <div key={index} className="report-entry">
            <div>
            <strong>Results:</strong>
            <ul>
          {Object.entries(entry.data.attributes.results).map(([engine, result]) => (
            <li key={engine}>
          {engine}: {result.category}
            </li>
            ))}
            </ul>
            </div>
            </div>
            ))}
        </div>
    );
  };


  return (
      <div className='center'>
        <MDBContainer fluid className="p-3 my-5">

          <MDBRow>

            <MDBCol col='10' md='6'>
              <img src="/mailarmor-logo.png" className="img-fluid" alt="logo"/>
            </MDBCol>

            <MDBCol col='4' md='6'>

              <form onSubmit={handleSubmitLogin}>
              <MDBInput
                  value={state.email}
                  onChange={handleEmailChangeLogin}
                  wrapperClass='mb-4'
                  label='Gmail address'
                  //type='email'
                  size="lg"
                  placeholder="Email"/>

              <MDBInput
                  value={state.password}
                  onChange={handlePasswordChangeLogin}
                  wrapperClass='mb-4'
                  label='Password'
                  type='password'
                  size="lg"
                  placeholder="Password"/>

              <MDBBtn className="mb-4 w-100" size="lg" type="submit">Analyze</MDBBtn>
                </form>

            </MDBCol>

          </MDBRow>
          {renderReport()}
            {renderResult()}






        </MDBContainer>
      </div>
  );
}

export default App;
